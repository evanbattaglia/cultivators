# Defaults compiled into the app.
# Some or all may be overridden in a .env file, or directly as environment
# variables (highest priority)
# The compiled config can be viewed with the `show-default-env` cli command

# Path to sqlite database. Will be created if it doesn't exist.
# Note on developing Cultivators:
# sea-orm-cli uses a DATABASE_URL variable in the format
# sqlite://database.sqlite -- do be sure to set then if generating
# migrations/entiies with sea-orm-cli. Cultivators only uses environment
# variables starting with "CULTIVATORS_".
# e.g.:
#   DATABASE_URL=sqlite://cultivators.sqlite sea-orm-cli generate entity -o entity/src
CULTIVATORS_SQLITE_FILE=cultivators.sqlite

CULTIVATORS_BIND_ADDRESS=127.0.0.1:3330
# Defaults to the same as the bind address (with scheme)
# CULTIVATORS_BASE_URL=http://localhost:3330

# TODO need to not use this!!!
# If empty, will use the default.private.pem compiled into the binary.
# Highly recommended to build your own key with
# 'cargo run --bin cli keygen > private.pem' and use that here.
CULTIVATORS_PRIVATE_KEY_PEM_FILE=cultivators.private.pem
CULTIVATORS_PRIVATE_KEY_PEM_FILE_CREATE_IF_MISSING=1

# TLS support
# For extra convenience, if CULTIVATORS_USE_TLS is on but the pem files are
# empty, a self-signed TLS cert will be generated. Many browsers will allow you
# to accept the invalid cert by going directly to the page and choosing to
# accept, or by manually importing the cert in privacy settings, which will
# allow you to use the tool in deployed / HTTPS platforms (otherwise, non-HTTPS
# iframes can't be embedded inside HTTPS pages).
# The domain used for generated certs is the value of CULTIVATORS_TLS_CERT_DOMAIN,
# or the BASE_URL's domain if that is empty
#
#
# CULTIVATORS_USE_TLS=1
# CULTIVATORS_TLS_CERT_PEM_FILE=
# CULTIVATORS_TLS_KEY_PEM_FILE=
# CULTIVATORS_TLS_GENERATED_CERT_DOMAIN=

# For local development with a local Platform, you can leave this empty
# to use a locally server JWK (derived from your private PEM file) in your LTI
# config (as long as your locally running platform can access the tool -- this
# may not be the case if the platform is running in docker and the tool is
# not). In cases where the platform cannot reach the tool, such as a local tool
# running with a deployed platform, you may wish to provide a hosted JWKS URL,
# because this is the only thing the Platform needs to make a request to the
# Tool for.
#
# TODO: need to check but I think canvas may actually only ever get the keys in
# LTI Advantage services? I don't think it needs a key otherwise?
#
# This JWK set was created from the default.private.pem with:
#   cargo run --bin cli gen jwkset | \
#   gh gist create -f public.jwks -p -w \
#    -d "Cultivators LTI tool public JWK set (development)"
#
# CULTIVATORS_JWKS_URI=

# Log levels.
# Separate level for app initialization (to hide generation of certs, for example)
# CULTIVATORS_LOG=debug
# CULTIVATORS_INIT_LOG=info
